Coding Jar Advanced Additive Scenes Plugin
Copyright: Coding Jar Studios 2014

!!! Quick Note: "CheckConsistency: Transform cannot be loaded" What Does it Mean? !!!
You can safely ignore this error.  This error is produced by Unity when attempting to load a SubScene; it's spurious.

Summaries
---------
Text + Pictures:  http://www.codingjargames.com/blog/2014/05/20/wip-advanced-additive-scenes/

Video:  https://www.youtube.com/watch?v=nnUoDs19WOQ

What are Additive Scenes / Additive Levels?
-------------------------------------------

Think of your scene as an image in Photoshop.  Your image is composed of multiple layers.  The final image is a composition of all of the layers.
An Additive Scene is like a layer.  Your final scene is composed of the "Main Scene" and all of its Additive Scenes merged together.

Unity supports Additive Scenes / Additive Levels natively.  Unity sometimes interchanges the terms "Additive Levels" (such as Application.LoadLevelAdditive) and "Additive Scene" (EditorApplication.OpenSceneAdditive).  I have decided to settle on "Additive Scene" for the purpose of this plug-in.

Why use the Advanced Additive Scenes Plug-In?
---------------------------------------------

There are many advantages to using this plug-in over built-in Unity functionality:

1. Editor functionality allows you to visualize all parts of how your level fits together.  Typically you would only be able to view the results at runtime.
2. You can make changes to any additive level from the main scene.  This allows for really quick iteration.
3. You can 'bake' the data into the final build.  That means faster load times since all of the data is merged into one scene instead of loading multiple scenes.
4. The resulting functionality of 1-3 means multiple people can work on the same main scene, as long they work on seperate additive parts of that scene.

What Are Sub-Scenes?
--------------------

A Sub-Scene is the term we use to describe an Additive Scene that belongs to a particular main scene.

Currently, all of the plug-in implementation works through the use of a SubScene MonoBehaviour which lives in a Main Scene.  The SubScene allows us to configure
when and where the Additive Scene gets created in certain circumstances.

How Do I Improve Team Iteration with Sub-Scenes?
-----------------------------------------------------

Multiple people can work on the scene as long as they are working on separate Additive Scenes (Sub-Scenes).

A typical scenario would be to break up your scene into "Audio", "Collision", "Decorations", and "Gameplay".  This will allow your audio engineer, artists, level designers, and programmers to modify the scene all at once as long as they stick to modifying objects in their respective Sub-Scene.

How Do I Install the Advanced Additive Scenes plug-in?
------------------------------------------------------

By default, when you import the plug-in, you will receive two DLLs and a Unity Package.  The DLLs are pre-compiled versions of the source code and should be used under normal circumstances.  This ensures the plug-in works regardless of your project's compilation errors.

If you want to extend the Advanced Additive Scenes functionality, the source code IS available!  The Unity Package contains all of the source code and even contains a top-level menu to rebuild the DLLs.  In order to use the Source Code version, you must first remove the Advanced Additive Scenes DLLs from your Project, and then extract the Source Code Unity Package.

!!! IMPORTANT !!!
If you are switching from DLLs to Source Code or vice-versa, you will need to re-apply the SubScene scripts to your GameObjects.  This happens because as far as Unity is concerned, the Source Code 'SubScene' class differs from the DLL 'SubScene' class and therefore it does not recognize they are one and the same.  FOR THIS REASON IT IS RECOMMENDED YOU CHOOSE TO USE DLLS OR SOURCE CODE WHEN YOU FIRST IMPORT THE PLUG-IN!

How Do I Use Additive Scenes?
-----------------------------

When using this plug-in, there is NO PROGRAMMING REQUIRED.  Everything is handled in the editor.  There are only two concepts to know when using the Advanced Additive Scene Plugin:

1. SubScene is the Monobehaviour that denotes a GameObject in the hierarchy as being the root of an Additive Scene.  All GameObjects under this root will live in an Additive Scene.
2. ANY Unity Scene can act as an Additive Scene.

-- To create a new SubScene --
1. Select all of the objects in the Hierarchy Window which should belong to the new SubScene.
2. Use the Menu: "GameObject / Create Other / Coding Jar / Sub-Scene / Create From Selected GameObjects".
3. You will be asked to save the newly created SubScene first.  You MUST do this, so find an appropriate spot in your project and save it.
4. You will now have a GameObject named the same as your SubScene was saved as.  Underneath this GameObject will be the objects you selected in Step 1.

-- To use an existing Scene --
1. Use the Menu: "GameObject / Create Other / Coding Jar / Sub-Scene / Import from Existing Scene"
2. Browse to the existing scene you want to import.
3. You will now have a GameObject named the same as your selected Scene.  Underneath this GameObject will be the objects contained in that existing scene.

When Does an Additive Scene Get Saved?
--------------------------------------

To prevent unwanted changes (and to speed-up the saving process for large projects), all Additive Scenes are loaded in "Locked Mode" by default.  This means that the Sub-Scenes aren't saved by default.

To save a SubScene, you will need to "Unlock" it.  You can do this by finding the Sub-Scene GameObject in the Hierarchy Window, then looking at the Inspector Window and clicking "Unlock".

You can then manually save an individual Sub-Scene by clicking "Save SubScene".

When saving the Main Scene (e.g. by using File -> Save, or File -> Save As), all Sub-Scenes are considered for saving if they are dirty.
Dirty Sub-Scenes are saved along with the Main Scene in the save process.

How Do I Remove a SubScene?
---------------------------

You may only delete the GameObject of a SubScene after the SubScene is unlocked.  If you remove the SubScene component from a GameObject, it will unlock the SubScene before removing itself.

Can I Nest Additive Scenes?
---------------------------

Yes, you may nest Additive Scenes as long as the loading process doesn't create a loop.  What do I mean by a loop?  SceneA loads SceneB loads SceneA, etc.

Using Additive Scenes is a great alternative to Unity's broken nested prefab system.

What Are My Options?
--------------------

There are a few options available for you to configure under "Edit / Preferences... / Additive Scenes".

What Are Runtime Load Settings?
-------------------------------

Bake (Default) - The data is merged into the main scene.  The Additive Scene does not have to be included in the build (doing so will increase the size of the build).  This is the fastest method for loading the scene and it ensures all objects are present during a scene load.
LoadLevelAdditive - The additive scene must be added to the build.  It is loaded when the MonoBehaviour receives its Awake().  The scene data will only be included once, but there will be additional overhead when loading the scene.  The objects in the Additive Scene will load at least one frame after the Main Scene's objects are loaded.
LoadLevelAdditiveAsync - The same as above, except the scene loads in over multiple frames.  This prevents a large stall during the load (in favour of smaller stalls).  It is only available if you have a Pro license.
DontLoad - The scene is not loaded automatically.  Instead you must load it yourself.  You can do this by calling SubScene.LoadAdditive() at runtime. 

How Do I Load a SubScene at Runtime?
------------------------------------

Use SubScene.LoadAdditive( bool bAsync ).  Note:  Asynchronous loading is only available to Unity Pro users.

How Does Additive Scenes Work With Lightmaps?
---------------------------------------------

LIGHTMAP SUPPORT IS STILL IN BETA.  PLEASE POST YOUR FINDINGS TO THE FORUM.  HERE IS SOME DOCUMENTATION ON THE CURRENT FUNCTIONALITY:

Lightmaps are a more complex issue with Additive Scenes.  Lightmapping changes the geometry of a level to 'bake' lighting.  The issue with additive scenes is that the light sources do not neccessarily come from the same level.  Consider this scenario:

1.  Geometry in SceneGeo
2.  SceneMain contains the sub scene "SceneGeo" and some light sources.

If you were to load up SceneGeo and Lightmap it, it would be completely dark.
If you were to load up SceneMain and Lightmap it, it would correctly light SceneGeo.

Here are the rules we follow for light maps:

- We import all lightmaps that are loaded from a SubScene.
- Anytime we import a lightmap from a SubScene (e.g. SceneGeo), that SubScene loads as unlocked (so that any lightmapping changes would apply to that SubScene).
- You can mess up this system by locking SceneGeo and lightmapping SceneMain
	- In this scenario, loading up SceneMain would show the correct lighting but loading up SceneGeo will not
- You can correctly re-lightmap SceneGeo and it will show-up properly in SceneMain

Advice:

Before releasing, always bake your scenes with the following settings:
	-  Any SubScenes that are 'BakedIntoScene' should be loaded and visible in the Editor during a Lightmap bake.
	-  Otherwise the SubScene should be unloaded during a Lightmap bake.

This will ensure that the correct lightmap data will be available.

Why Not Use Prefabs Instead of Additive Scenes?
-----------------------------------------------

The short answer is that Unity does not support nested prefabs.  If that statement confuses you, consider the following scenario:

1. You create a model of a door, let's call it "Door".  It has animations to open and close and Unity automatically creates a "model prefab".  "Model prefabs" are what you see in the Project Window when you click on your model.
2. You need the animations to play at specify times, like when the player steps into a trigger volume of the doorway.
3. As per #2, you create a prefab which contains a trigger volume, a script to control the animation, and the "Door" model.  Let's call this prefab "DoorPrefab".
4. You now decide that you're unhappy with the "Door" model and replace the model with a better version, probably with different materials and different animations.
5. Even though you've replaced the "Door" model prefab, "DoorPrefab" does not automatically get updated.  You must find that prefab and update it manually.

Explanation of Bake vs. Load Additively
---------------------------------------

Bake Into Scene is great for 3D scenes.  When baking, all of the data lives with the level.  So to the Unity runtime, there's no difference between having one big level, or having it broken up into a small level with 5 sub-levels.  You'll experience the same loading time.  The disadvantage to baking is that you can no longer re-use that level data.  Let's say you used Bake Into Scene to display your HUD in 30 levels.  You will now have 30x the HUD data in your game (one in each level).

LoadAdditive is a great scenario for the HUD.  In this scenario, the SubScenes must be added to your Build Settings (they act as any other level).  The plug-in will automatically load the SubScenes when they first get their Awake().  This will allow you to display a frame of your game level before the GUI loads in.  If you start off with your SubScenes as Deactivated in the Scene, the SubScenes will not get their Awake().  Then you can activate them whenever you need, and the SubScenes will load in at that time.

Unity Pro allows you to use asynchronous loading (LoadAdditiveAsync), which means the loading will happen "in the background".  In reality, your frame rate chugs for a bit while it loads in, but it looks like your loading time is reduced because you're still displaying stuff.  This is a good candidate for the HUD/GUI as you don't care if it's not there for a few frames.

Don't Load allows you to control the loading yourself.  For instance, choosing LoadAdditive and then determining when you want to load the SubScene avoids a big frame spike because you won't be automatically loading the SubScenes on the same frame.  This is similar to just disabling the SubScenes and re-enabling them when you want to, except it requires a call to SubScene.LoadAdditive.

What is a Cross-Scene Reference?
--------------------------------

A cross-scene reference is a reference that occurs across scene boundaries.  For instance, if you have two SubScenes (A and B), then any Object in SceneA that references an Object in SceneB is a cross-scene reference.

Why Are Cross-Scene References Bad?
-----------------------------------

Cross-scene references are bad because they cannot be loaded at runtime.  This is a Unity limitation.  Anything that lives in the Project cannot reference Scene data.  For instance, your Prefabs cannot reference data in a scene.

This plug-in attempts to allow you to reference objects across scene boundaries.  The limitation is that you may only do so if you use BakeIntoScene as your Runtime Load Setting.  As described above, baking data into your scene ensures Unity sees all of the data as a single scene.  Using any other mode allows your scene to load at an undetermined time and therefore the existance of the cross-scene reference cannot be guaranteed.

If you absolutely need a cross-scene reference in a non-baked SubScene, you should use another method of referencing the object.  Examples:
	- GameObject.Find
	- Static variables
	- An asset-proxy system (this will be included in future versions)

FAQ
---

Q:  Why do I always get a CheckConsistency error when using this plug-in?
A:  Unity does not handle objects that are not set to save properly.  The plug-in is based on this feature and therefore this error appears every time you attempt to load a Scene which contains SubScenes.  It's safe to ignore this error.

Thanks & Support
----------------
Thank you for purchasing the Advanced Additive Scenes plug-in from Coding Jar Studios.  We strive to ensure all of our plug-ins are high-quality, easy to use, and free of issues.

If you have any issues with the plug-in, don't hesitate to post your question in the official support forum.  It SHOULD notify me whenever someone posts, but to be safe you should also send an e-mail.

Support Forum:		http://forum.unity3d.com/threads/advanced-additive-scenes.247092
Support E-mail:		jodon@codingjar.com